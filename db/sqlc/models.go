// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type UserRole string

const (
	UserRoleDoctor  UserRole = "doctor"
	UserRolePatient UserRole = "patient"
	UserRoleSeller  UserRole = "seller"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type DoctorProfile struct {
	Username        string `json:"username"`
	Specialization  string `json:"specialization"`
	ExperienceYears int32  `json:"experience_years"`
	ClinicAddress   string `json:"clinic_address"`
	PhoneNumber     string `json:"phone_number"`
}

type PatientProfile struct {
	Username    string `json:"username"`
	Age         int32  `json:"age"`
	BloodGroup  string `json:"blood_group"`
	Allergies   string `json:"allergies"`
	PhoneNumber string `json:"phone_number"`
}

type SellerProfile struct {
	Username      string `json:"username"`
	ShopName      string `json:"shop_name"`
	LicenseNumber string `json:"license_number"`
	ShopAddress   string `json:"shop_address"`
	PhoneNumber   string `json:"phone_number"`
}

type User struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	Role              UserRole  `json:"role"`
	IsEmailVerified   bool      `json:"is_email_verified"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
}
