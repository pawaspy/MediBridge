// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: doctor_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDoctorProfile = `-- name: CreateDoctorProfile :one
INSERT INTO doctor_profiles(
    username,
    specialization,
    experience_years,
    clinic_address,
    phone_number
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING username, specialization, experience_years, clinic_address, phone_number
`

type CreateDoctorProfileParams struct {
	Username        string `json:"username"`
	Specialization  string `json:"specialization"`
	ExperienceYears int32  `json:"experience_years"`
	ClinicAddress   string `json:"clinic_address"`
	PhoneNumber     string `json:"phone_number"`
}

func (q *Queries) CreateDoctorProfile(ctx context.Context, arg CreateDoctorProfileParams) (DoctorProfile, error) {
	row := q.db.QueryRow(ctx, createDoctorProfile,
		arg.Username,
		arg.Specialization,
		arg.ExperienceYears,
		arg.ClinicAddress,
		arg.PhoneNumber,
	)
	var i DoctorProfile
	err := row.Scan(
		&i.Username,
		&i.Specialization,
		&i.ExperienceYears,
		&i.ClinicAddress,
		&i.PhoneNumber,
	)
	return i, err
}

const findDoctorsByName = `-- name: FindDoctorsByName :many
SELECT 
    d.username, d.specialization, d.experience_years, d.clinic_address, d.phone_number,
    u.full_name,
    u.email
FROM doctor_profiles d
JOIN users u ON d.username = u.username
WHERE u.full_name ILIKE '%' || $1 || '%'
ORDER BY d.experience_years DESC
LIMIT $2
OFFSET $3
`

type FindDoctorsByNameParams struct {
	Column1 pgtype.Text `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type FindDoctorsByNameRow struct {
	Username        string `json:"username"`
	Specialization  string `json:"specialization"`
	ExperienceYears int32  `json:"experience_years"`
	ClinicAddress   string `json:"clinic_address"`
	PhoneNumber     string `json:"phone_number"`
	FullName        string `json:"full_name"`
	Email           string `json:"email"`
}

func (q *Queries) FindDoctorsByName(ctx context.Context, arg FindDoctorsByNameParams) ([]FindDoctorsByNameRow, error) {
	rows, err := q.db.Query(ctx, findDoctorsByName, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindDoctorsByNameRow{}
	for rows.Next() {
		var i FindDoctorsByNameRow
		if err := rows.Scan(
			&i.Username,
			&i.Specialization,
			&i.ExperienceYears,
			&i.ClinicAddress,
			&i.PhoneNumber,
			&i.FullName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDoctorsBySpecialization = `-- name: ListDoctorsBySpecialization :many
SELECT d.username, d.specialization, d.experience_years, d.clinic_address, d.phone_number FROM doctor_profiles d
WHERE d.specialization = $1
ORDER BY d.experience_years DESC
`

func (q *Queries) ListDoctorsBySpecialization(ctx context.Context, specialization string) ([]DoctorProfile, error) {
	rows, err := q.db.Query(ctx, listDoctorsBySpecialization, specialization)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DoctorProfile{}
	for rows.Next() {
		var i DoctorProfile
		if err := rows.Scan(
			&i.Username,
			&i.Specialization,
			&i.ExperienceYears,
			&i.ClinicAddress,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDoctorProfile = `-- name: UpdateDoctorProfile :one
UPDATE doctor_profiles
SET
    specialization = COALESCE($1, specialization),
    experience_years = COALESCE($2, experience_years),
    clinic_address = COALESCE($3, clinic_address),
    phone_number = COALESCE($4, phone_number)
WHERE
    username = $5
RETURNING username, specialization, experience_years, clinic_address, phone_number
`

type UpdateDoctorProfileParams struct {
	Specialization  pgtype.Text `json:"specialization"`
	ExperienceYears pgtype.Int4 `json:"experience_years"`
	ClinicAddress   pgtype.Text `json:"clinic_address"`
	PhoneNumber     pgtype.Text `json:"phone_number"`
	Username        string      `json:"username"`
}

func (q *Queries) UpdateDoctorProfile(ctx context.Context, arg UpdateDoctorProfileParams) (DoctorProfile, error) {
	row := q.db.QueryRow(ctx, updateDoctorProfile,
		arg.Specialization,
		arg.ExperienceYears,
		arg.ClinicAddress,
		arg.PhoneNumber,
		arg.Username,
	)
	var i DoctorProfile
	err := row.Scan(
		&i.Username,
		&i.Specialization,
		&i.ExperienceYears,
		&i.ClinicAddress,
		&i.PhoneNumber,
	)
	return i, err
}
