// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: doctor.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDoctor = `-- name: CreateDoctor :one
INSERT INTO doctors (
  username, full_name, mobile_number, gender, age,
  specialization, email, password,
  registration_number, hospital_name, years_experience
) VALUES (
  $1, $2, $3, $4, $5,
  $6, $7, $8,
  $9, $10, $11
) RETURNING username, full_name, mobile_number, gender, age, specialization, email, password, registration_number, hospital_name, years_experience, password_changed_at, created_at
`

type CreateDoctorParams struct {
	Username           string      `json:"username"`
	FullName           string      `json:"full_name"`
	MobileNumber       string      `json:"mobile_number"`
	Gender             string      `json:"gender"`
	Age                int32       `json:"age"`
	Specialization     string      `json:"specialization"`
	Email              string      `json:"email"`
	Password           string      `json:"password"`
	RegistrationNumber string      `json:"registration_number"`
	HospitalName       pgtype.Text `json:"hospital_name"`
	YearsExperience    int32       `json:"years_experience"`
}

func (q *Queries) CreateDoctor(ctx context.Context, arg CreateDoctorParams) (Doctor, error) {
	row := q.db.QueryRow(ctx, createDoctor,
		arg.Username,
		arg.FullName,
		arg.MobileNumber,
		arg.Gender,
		arg.Age,
		arg.Specialization,
		arg.Email,
		arg.Password,
		arg.RegistrationNumber,
		arg.HospitalName,
		arg.YearsExperience,
	)
	var i Doctor
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.MobileNumber,
		&i.Gender,
		&i.Age,
		&i.Specialization,
		&i.Email,
		&i.Password,
		&i.RegistrationNumber,
		&i.HospitalName,
		&i.YearsExperience,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDoctor = `-- name: DeleteDoctor :one
DELETE FROM doctors WHERE username = $1
RETURNING username
`

func (q *Queries) DeleteDoctor(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, deleteDoctor, username)
	err := row.Scan(&username)
	return username, err
}

const getDoctorByName = `-- name: GetDoctorByName :one
SELECT username, full_name, mobile_number, gender, age, specialization, email, password, registration_number, hospital_name, years_experience, password_changed_at, created_at FROM doctors WHERE username = $1
`

func (q *Queries) GetDoctorByName(ctx context.Context, username string) (Doctor, error) {
	row := q.db.QueryRow(ctx, getDoctorByName, username)
	var i Doctor
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.MobileNumber,
		&i.Gender,
		&i.Age,
		&i.Specialization,
		&i.Email,
		&i.Password,
		&i.RegistrationNumber,
		&i.HospitalName,
		&i.YearsExperience,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listDoctorsBySpecialization = `-- name: ListDoctorsBySpecialization :many
SELECT username, full_name, mobile_number, gender, age, specialization, email, password, registration_number, hospital_name, years_experience, password_changed_at, created_at FROM doctors
WHERE specialization = $1
ORDER BY years_experience DESC
LIMIT $2 OFFSET $3
`

type ListDoctorsBySpecializationParams struct {
	Specialization string `json:"specialization"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) ListDoctorsBySpecialization(ctx context.Context, arg ListDoctorsBySpecializationParams) ([]Doctor, error) {
	rows, err := q.db.Query(ctx, listDoctorsBySpecialization, arg.Specialization, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Doctor{}
	for rows.Next() {
		var i Doctor
		if err := rows.Scan(
			&i.Username,
			&i.FullName,
			&i.MobileNumber,
			&i.Gender,
			&i.Age,
			&i.Specialization,
			&i.Email,
			&i.Password,
			&i.RegistrationNumber,
			&i.HospitalName,
			&i.YearsExperience,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDoctor = `-- name: UpdateDoctor :one
UPDATE doctors SET
  full_name = COALESCE($1, full_name),
  mobile_number = COALESCE($2, mobile_number),
  gender = COALESCE($3, gender),
  age = COALESCE($4, age),
  specialization = COALESCE($5, specialization),
  email = COALESCE($6, email),
  password = COALESCE($7, password),
  registration_number = COALESCE($8, registration_number),
  hospital_name = COALESCE($9, hospital_name),
  years_experience = COALESCE($10, years_experience),
  password_changed_at = COALESCE($11, password_changed_at)
WHERE username = $12
RETURNING username, full_name, mobile_number, gender, age, specialization, email, password, registration_number, hospital_name, years_experience, password_changed_at, created_at
`

type UpdateDoctorParams struct {
	FullName           pgtype.Text      `json:"full_name"`
	MobileNumber       pgtype.Text      `json:"mobile_number"`
	Gender             pgtype.Text      `json:"gender"`
	Age                pgtype.Int4      `json:"age"`
	Specialization     pgtype.Text      `json:"specialization"`
	Email              pgtype.Text      `json:"email"`
	Password           pgtype.Text      `json:"password"`
	RegistrationNumber pgtype.Text      `json:"registration_number"`
	HospitalName       pgtype.Text      `json:"hospital_name"`
	YearsExperience    pgtype.Int4      `json:"years_experience"`
	PasswordChangedAt  pgtype.Timestamp `json:"password_changed_at"`
	Username           string           `json:"username"`
}

func (q *Queries) UpdateDoctor(ctx context.Context, arg UpdateDoctorParams) (Doctor, error) {
	row := q.db.QueryRow(ctx, updateDoctor,
		arg.FullName,
		arg.MobileNumber,
		arg.Gender,
		arg.Age,
		arg.Specialization,
		arg.Email,
		arg.Password,
		arg.RegistrationNumber,
		arg.HospitalName,
		arg.YearsExperience,
		arg.PasswordChangedAt,
		arg.Username,
	)
	var i Doctor
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.MobileNumber,
		&i.Gender,
		&i.Age,
		&i.Specialization,
		&i.Email,
		&i.Password,
		&i.RegistrationNumber,
		&i.HospitalName,
		&i.YearsExperience,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
