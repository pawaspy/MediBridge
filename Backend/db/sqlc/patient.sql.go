// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: patient.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (
  username, full_name, mobile_number, gender, email,
  password, age, address, emergency_contact
) VALUES (
  $1, $2, $3, $4,
  $5, $6, $7, $8, $9
) RETURNING username, full_name, email, mobile_number, password, gender, age, address, emergency_contact, password_changed_at, created_at
`

type CreatePatientParams struct {
	Username         string `json:"username"`
	FullName         string `json:"full_name"`
	MobileNumber     string `json:"mobile_number"`
	Gender           string `json:"gender"`
	Email            string `json:"email"`
	Password         string `json:"password"`
	Age              int32  `json:"age"`
	Address          string `json:"address"`
	EmergencyContact string `json:"emergency_contact"`
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, createPatient,
		arg.Username,
		arg.FullName,
		arg.MobileNumber,
		arg.Gender,
		arg.Email,
		arg.Password,
		arg.Age,
		arg.Address,
		arg.EmergencyContact,
	)
	var i Patient
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.MobileNumber,
		&i.Password,
		&i.Gender,
		&i.Age,
		&i.Address,
		&i.EmergencyContact,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePatient = `-- name: DeletePatient :one
DELETE FROM patients WHERE username = $1
RETURNING username
`

func (q *Queries) DeletePatient(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, deletePatient, username)
	err := row.Scan(&username)
	return username, err
}

const getPatientByName = `-- name: GetPatientByName :one
SELECT username, full_name, email, mobile_number, password, gender, age, address, emergency_contact, password_changed_at, created_at FROM patients WHERE username = $1
`

func (q *Queries) GetPatientByName(ctx context.Context, username string) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByName, username)
	var i Patient
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.MobileNumber,
		&i.Password,
		&i.Gender,
		&i.Age,
		&i.Address,
		&i.EmergencyContact,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updatePatient = `-- name: UpdatePatient :one
UPDATE patients SET
  full_name = COALESCE($1, full_name),
  mobile_number = COALESCE($2, mobile_number),
  age = COALESCE($3, age),
  password = COALESCE($4, password),
  address = COALESCE($5, address),
  emergency_contact = COALESCE($6, emergency_contact),
  password_changed_at = COALESCE($7, password_changed_at)
WHERE username = $8
RETURNING username, full_name, email, mobile_number, password, gender, age, address, emergency_contact, password_changed_at, created_at
`

type UpdatePatientParams struct {
	FullName          pgtype.Text      `json:"full_name"`
	MobileNumber      pgtype.Text      `json:"mobile_number"`
	Age               pgtype.Int4      `json:"age"`
	Password          pgtype.Text      `json:"password"`
	Address           pgtype.Text      `json:"address"`
	EmergencyContact  pgtype.Text      `json:"emergency_contact"`
	PasswordChangedAt pgtype.Timestamp `json:"password_changed_at"`
	Username          string           `json:"username"`
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, updatePatient,
		arg.FullName,
		arg.MobileNumber,
		arg.Age,
		arg.Password,
		arg.Address,
		arg.EmergencyContact,
		arg.PasswordChangedAt,
		arg.Username,
	)
	var i Patient
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.MobileNumber,
		&i.Password,
		&i.Gender,
		&i.Age,
		&i.Address,
		&i.EmergencyContact,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
