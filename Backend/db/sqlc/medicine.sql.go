// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: medicine.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMedicine = `-- name: CreateMedicine :one
INSERT INTO medicines (
    name, description, expiry_date, quantity, price, discount, seller_username
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, description, expiry_date, quantity, price, discount, seller_username, created_at
`

type CreateMedicineParams struct {
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	ExpiryDate     pgtype.Date    `json:"expiry_date"`
	Quantity       int32          `json:"quantity"`
	Price          pgtype.Numeric `json:"price"`
	Discount       int32          `json:"discount"`
	SellerUsername string         `json:"seller_username"`
}

func (q *Queries) CreateMedicine(ctx context.Context, arg CreateMedicineParams) (Medicine, error) {
	row := q.db.QueryRow(ctx, createMedicine,
		arg.Name,
		arg.Description,
		arg.ExpiryDate,
		arg.Quantity,
		arg.Price,
		arg.Discount,
		arg.SellerUsername,
	)
	var i Medicine
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ExpiryDate,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.SellerUsername,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMedicine = `-- name: DeleteMedicine :one
DELETE FROM medicines WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteMedicine(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteMedicine, id)
	err := row.Scan(&id)
	return id, err
}

const getMedicine = `-- name: GetMedicine :one
SELECT id, name, description, expiry_date, quantity, price, discount, seller_username, created_at FROM medicines WHERE id = $1
`

func (q *Queries) GetMedicine(ctx context.Context, id int32) (Medicine, error) {
	row := q.db.QueryRow(ctx, getMedicine, id)
	var i Medicine
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ExpiryDate,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.SellerUsername,
		&i.CreatedAt,
	)
	return i, err
}

const getMedicineByName = `-- name: GetMedicineByName :one
SELECT id, name, description, expiry_date, quantity, price, discount, seller_username, created_at FROM medicines WHERE name = $1
`

func (q *Queries) GetMedicineByName(ctx context.Context, name string) (Medicine, error) {
	row := q.db.QueryRow(ctx, getMedicineByName, name)
	var i Medicine
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ExpiryDate,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.SellerUsername,
		&i.CreatedAt,
	)
	return i, err
}

const listAllMedicines = `-- name: ListAllMedicines :many
SELECT id, name, description, expiry_date, quantity, price, discount, seller_username, created_at FROM medicines
ORDER BY id ASC
`

func (q *Queries) ListAllMedicines(ctx context.Context) ([]Medicine, error) {
	rows, err := q.db.Query(ctx, listAllMedicines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medicine{}
	for rows.Next() {
		var i Medicine
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ExpiryDate,
			&i.Quantity,
			&i.Price,
			&i.Discount,
			&i.SellerUsername,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSellerMedicinesByExpiry = `-- name: ListSellerMedicinesByExpiry :many
SELECT id, name, description, expiry_date, quantity, price, discount, seller_username, created_at FROM medicines
WHERE seller_username = $1
ORDER BY expiry_date ASC
LIMIT $2 OFFSET $3
`

type ListSellerMedicinesByExpiryParams struct {
	SellerUsername string `json:"seller_username"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) ListSellerMedicinesByExpiry(ctx context.Context, arg ListSellerMedicinesByExpiryParams) ([]Medicine, error) {
	rows, err := q.db.Query(ctx, listSellerMedicinesByExpiry, arg.SellerUsername, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medicine{}
	for rows.Next() {
		var i Medicine
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ExpiryDate,
			&i.Quantity,
			&i.Price,
			&i.Discount,
			&i.SellerUsername,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchMedicinesByNameSortedByPrice = `-- name: SearchMedicinesByNameSortedByPrice :many
SELECT id, name, description, expiry_date, quantity, price, discount, seller_username, created_at FROM medicines
WHERE name ILIKE '%' || $1 || '%'
ORDER BY price ASC
LIMIT $3 OFFSET $2
`

type SearchMedicinesByNameSortedByPriceParams struct {
	Name   pgtype.Text `json:"name"`
	Offset int32       `json:"offset"`
	Limit  int32       `json:"limit"`
}

func (q *Queries) SearchMedicinesByNameSortedByPrice(ctx context.Context, arg SearchMedicinesByNameSortedByPriceParams) ([]Medicine, error) {
	rows, err := q.db.Query(ctx, searchMedicinesByNameSortedByPrice, arg.Name, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medicine{}
	for rows.Next() {
		var i Medicine
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ExpiryDate,
			&i.Quantity,
			&i.Price,
			&i.Discount,
			&i.SellerUsername,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMedicine = `-- name: UpdateMedicine :one
UPDATE medicines SET
    name = COALESCE($1, name),
    description = COALESCE($2, description),
    expiry_date = COALESCE($3, expiry_date),
    quantity = COALESCE($4, quantity),
    price = COALESCE($5, price),
    discount = COALESCE($6, discount)
WHERE id = $7
RETURNING id, name, description, expiry_date, quantity, price, discount, seller_username, created_at
`

type UpdateMedicineParams struct {
	Name        pgtype.Text    `json:"name"`
	Description pgtype.Text    `json:"description"`
	ExpiryDate  pgtype.Date    `json:"expiry_date"`
	Quantity    pgtype.Int4    `json:"quantity"`
	Price       pgtype.Numeric `json:"price"`
	Discount    pgtype.Int4    `json:"discount"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateMedicine(ctx context.Context, arg UpdateMedicineParams) (Medicine, error) {
	row := q.db.QueryRow(ctx, updateMedicine,
		arg.Name,
		arg.Description,
		arg.ExpiryDate,
		arg.Quantity,
		arg.Price,
		arg.Discount,
		arg.ID,
	)
	var i Medicine
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ExpiryDate,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.SellerUsername,
		&i.CreatedAt,
	)
	return i, err
}
