// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: patient_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPatientProfile = `-- name: CreatePatientProfile :one
INSERT INTO patient_profiles (
    username, disease_allergies, blood_group, prescribed_medicine
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, username, disease_allergies, blood_group, prescribed_medicine, created_at
`

type CreatePatientProfileParams struct {
	Username           string      `json:"username"`
	DiseaseAllergies   pgtype.Text `json:"disease_allergies"`
	BloodGroup         pgtype.Text `json:"blood_group"`
	PrescribedMedicine pgtype.Text `json:"prescribed_medicine"`
}

func (q *Queries) CreatePatientProfile(ctx context.Context, arg CreatePatientProfileParams) (PatientProfile, error) {
	row := q.db.QueryRow(ctx, createPatientProfile,
		arg.Username,
		arg.DiseaseAllergies,
		arg.BloodGroup,
		arg.PrescribedMedicine,
	)
	var i PatientProfile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DiseaseAllergies,
		&i.BloodGroup,
		&i.PrescribedMedicine,
		&i.CreatedAt,
	)
	return i, err
}

const deletePatientProfile = `-- name: DeletePatientProfile :exec
DELETE FROM patient_profiles
WHERE username = $1
`

func (q *Queries) DeletePatientProfile(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deletePatientProfile, username)
	return err
}

const getPatientProfile = `-- name: GetPatientProfile :one
SELECT id, username, disease_allergies, blood_group, prescribed_medicine, created_at FROM patient_profiles
WHERE username = $1
`

func (q *Queries) GetPatientProfile(ctx context.Context, username string) (PatientProfile, error) {
	row := q.db.QueryRow(ctx, getPatientProfile, username)
	var i PatientProfile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DiseaseAllergies,
		&i.BloodGroup,
		&i.PrescribedMedicine,
		&i.CreatedAt,
	)
	return i, err
}

const listPatientProfiles = `-- name: ListPatientProfiles :many
SELECT id, username, disease_allergies, blood_group, prescribed_medicine, created_at FROM patient_profiles
ORDER BY id
`

func (q *Queries) ListPatientProfiles(ctx context.Context) ([]PatientProfile, error) {
	rows, err := q.db.Query(ctx, listPatientProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PatientProfile{}
	for rows.Next() {
		var i PatientProfile
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DiseaseAllergies,
			&i.BloodGroup,
			&i.PrescribedMedicine,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePatientProfile = `-- name: UpdatePatientProfile :one
UPDATE patient_profiles
SET
    disease_allergies = COALESCE($1, disease_allergies),
    blood_group = COALESCE($2, blood_group),
    prescribed_medicine = COALESCE($3, prescribed_medicine),
    updated_at = now()
WHERE username = $4
RETURNING id, username, disease_allergies, blood_group, prescribed_medicine, created_at
`

type UpdatePatientProfileParams struct {
	DiseaseAllergies   pgtype.Text `json:"disease_allergies"`
	BloodGroup         pgtype.Text `json:"blood_group"`
	PrescribedMedicine pgtype.Text `json:"prescribed_medicine"`
	Username           string      `json:"username"`
}

func (q *Queries) UpdatePatientProfile(ctx context.Context, arg UpdatePatientProfileParams) (PatientProfile, error) {
	row := q.db.QueryRow(ctx, updatePatientProfile,
		arg.DiseaseAllergies,
		arg.BloodGroup,
		arg.PrescribedMedicine,
		arg.Username,
	)
	var i PatientProfile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DiseaseAllergies,
		&i.BloodGroup,
		&i.PrescribedMedicine,
		&i.CreatedAt,
	)
	return i, err
}
