// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: seller_profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSellerProfile = `-- name: CreateSellerProfile :one
INSERT INTO seller_profiles (
    username,
    shop_name,
    license_number,
    shop_address,
    phone_number
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING username, shop_name, license_number, shop_address, phone_number
`

type CreateSellerProfileParams struct {
	Username      string `json:"username"`
	ShopName      string `json:"shop_name"`
	LicenseNumber string `json:"license_number"`
	ShopAddress   string `json:"shop_address"`
	PhoneNumber   string `json:"phone_number"`
}

func (q *Queries) CreateSellerProfile(ctx context.Context, arg CreateSellerProfileParams) (SellerProfile, error) {
	row := q.db.QueryRow(ctx, createSellerProfile,
		arg.Username,
		arg.ShopName,
		arg.LicenseNumber,
		arg.ShopAddress,
		arg.PhoneNumber,
	)
	var i SellerProfile
	err := row.Scan(
		&i.Username,
		&i.ShopName,
		&i.LicenseNumber,
		&i.ShopAddress,
		&i.PhoneNumber,
	)
	return i, err
}

const deleteSellerProfile = `-- name: DeleteSellerProfile :one
DELETE FROM seller_profiles
WHERE username = $1
RETURNING username
`

func (q *Queries) DeleteSellerProfile(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, deleteSellerProfile, username)
	err := row.Scan(&username)
	return username, err
}

const searchShops = `-- name: SearchShops :many
SELECT username, shop_name, license_number, shop_address, phone_number 
FROM seller_profiles
WHERE shop_name ILIKE '%' || $1 || '%'
ORDER BY shop_name
LIMIT $3 OFFSET $2
`

type SearchShopsParams struct {
	Keyword pgtype.Text `json:"keyword"`
	Offset  int32       `json:"offset"`
	Limit   int32       `json:"limit"`
}

func (q *Queries) SearchShops(ctx context.Context, arg SearchShopsParams) ([]SellerProfile, error) {
	rows, err := q.db.Query(ctx, searchShops, arg.Keyword, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SellerProfile{}
	for rows.Next() {
		var i SellerProfile
		if err := rows.Scan(
			&i.Username,
			&i.ShopName,
			&i.LicenseNumber,
			&i.ShopAddress,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSellerProfile = `-- name: UpdateSellerProfile :one
UPDATE seller_profiles
SET
    shop_name = COALESCE($1, shop_name),
    license_number = COALESCE($2, license_number),
    shop_address = COALESCE($3, shop_address),
    phone_number = COALESCE($4, phone_number)
WHERE
    username = $5
RETURNING username, shop_name, license_number, shop_address, phone_number
`

type UpdateSellerProfileParams struct {
	ShopName      pgtype.Text `json:"shop_name"`
	LicenseNumber pgtype.Text `json:"license_number"`
	ShopAddress   pgtype.Text `json:"shop_address"`
	PhoneNumber   pgtype.Text `json:"phone_number"`
	Username      string      `json:"username"`
}

func (q *Queries) UpdateSellerProfile(ctx context.Context, arg UpdateSellerProfileParams) (SellerProfile, error) {
	row := q.db.QueryRow(ctx, updateSellerProfile,
		arg.ShopName,
		arg.LicenseNumber,
		arg.ShopAddress,
		arg.PhoneNumber,
		arg.Username,
	)
	var i SellerProfile
	err := row.Scan(
		&i.Username,
		&i.ShopName,
		&i.LicenseNumber,
		&i.ShopAddress,
		&i.PhoneNumber,
	)
	return i, err
}
