// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: patient_profiel.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPatientProfile = `-- name: CreatePatientProfile :one
INSERT INTO patient_profiles (
    username,
    age,
    blood_group,
    allergies,
    phone_number
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING username, age, blood_group, allergies, phone_number
`

type CreatePatientProfileParams struct {
	Username    string `json:"username"`
	Age         int32  `json:"age"`
	BloodGroup  string `json:"blood_group"`
	Allergies   string `json:"allergies"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) CreatePatientProfile(ctx context.Context, arg CreatePatientProfileParams) (PatientProfile, error) {
	row := q.db.QueryRow(ctx, createPatientProfile,
		arg.Username,
		arg.Age,
		arg.BloodGroup,
		arg.Allergies,
		arg.PhoneNumber,
	)
	var i PatientProfile
	err := row.Scan(
		&i.Username,
		&i.Age,
		&i.BloodGroup,
		&i.Allergies,
		&i.PhoneNumber,
	)
	return i, err
}

const deletePatientProfile = `-- name: DeletePatientProfile :one
DELETE FROM patient_profiles
WHERE username = $1
RETURNING username
`

func (q *Queries) DeletePatientProfile(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, deletePatientProfile, username)
	err := row.Scan(&username)
	return username, err
}

const getPatientProfile = `-- name: GetPatientProfile :one
SELECT username, age, blood_group, allergies, phone_number FROM patient_profiles
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetPatientProfile(ctx context.Context, username string) (PatientProfile, error) {
	row := q.db.QueryRow(ctx, getPatientProfile, username)
	var i PatientProfile
	err := row.Scan(
		&i.Username,
		&i.Age,
		&i.BloodGroup,
		&i.Allergies,
		&i.PhoneNumber,
	)
	return i, err
}

const updatePatientProfile = `-- name: UpdatePatientProfile :one
UPDATE patient_profiles
SET
    age = COALESCE($1, age),
    blood_group = COALESCE($2, blood_group),
    allergies = COALESCE($3, allergies),
    phone_number = COALESCE($4, phone_number)
WHERE
    username = $5
RETURNING username, age, blood_group, allergies, phone_number
`

type UpdatePatientProfileParams struct {
	Age         pgtype.Int4 `json:"age"`
	BloodGroup  pgtype.Text `json:"blood_group"`
	Allergies   pgtype.Text `json:"allergies"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	Username    string      `json:"username"`
}

func (q *Queries) UpdatePatientProfile(ctx context.Context, arg UpdatePatientProfileParams) (PatientProfile, error) {
	row := q.db.QueryRow(ctx, updatePatientProfile,
		arg.Age,
		arg.BloodGroup,
		arg.Allergies,
		arg.PhoneNumber,
		arg.Username,
	)
	var i PatientProfile
	err := row.Scan(
		&i.Username,
		&i.Age,
		&i.BloodGroup,
		&i.Allergies,
		&i.PhoneNumber,
	)
	return i, err
}
