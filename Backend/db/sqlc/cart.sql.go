// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cart.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addToCart = `-- name: AddToCart :one
INSERT INTO carts (patient_username, medicine_id, quantity, total_price)
VALUES ($1, $2, $3, (SELECT price * $3 FROM medicines WHERE id = $2))
ON CONFLICT (patient_username, medicine_id) DO UPDATE
SET 
    quantity = EXCLUDED.quantity,
    total_price = (SELECT price * EXCLUDED.quantity FROM medicines WHERE id = EXCLUDED.medicine_id)
RETURNING id, patient_username, medicine_id, quantity, total_price, created_at, updated_at
`

type AddToCartParams struct {
	PatientUsername string `json:"patient_username"`
	MedicineID      int32  `json:"medicine_id"`
	Quantity        int32  `json:"quantity"`
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, addToCart, arg.PatientUsername, arg.MedicineID, arg.Quantity)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.PatientUsername,
		&i.MedicineID,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const clearCart = `-- name: ClearCart :exec
DELETE FROM carts c
WHERE c.patient_username = $1
`

func (q *Queries) ClearCart(ctx context.Context, patientUsername string) error {
	_, err := q.db.Exec(ctx, clearCart, patientUsername)
	return err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM carts c
WHERE c.id = $1 AND c.patient_username = $2
`

type DeleteCartItemParams struct {
	ID              int32  `json:"id"`
	PatientUsername string `json:"patient_username"`
}

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) error {
	_, err := q.db.Exec(ctx, deleteCartItem, arg.ID, arg.PatientUsername)
	return err
}

const getCartCount = `-- name: GetCartCount :one
SELECT COUNT(*) as item_count
FROM carts c
WHERE c.patient_username = $1
`

func (q *Queries) GetCartCount(ctx context.Context, patientUsername string) (int64, error) {
	row := q.db.QueryRow(ctx, getCartCount, patientUsername)
	var item_count int64
	err := row.Scan(&item_count)
	return item_count, err
}

const getCartItem = `-- name: GetCartItem :one
SELECT c.id, c.patient_username, c.medicine_id, c.quantity, c.total_price, c.created_at, c.updated_at FROM carts c
WHERE c.id = $1 AND c.patient_username = $2
`

type GetCartItemParams struct {
	ID              int32  `json:"id"`
	PatientUsername string `json:"patient_username"`
}

func (q *Queries) GetCartItem(ctx context.Context, arg GetCartItemParams) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartItem, arg.ID, arg.PatientUsername)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.PatientUsername,
		&i.MedicineID,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCartItems = `-- name: GetCartItems :many
SELECT 
    c.id, 
    c.patient_username, 
    c.medicine_id, 
    c.quantity, 
    c.total_price, 
    c.created_at, 
    c.updated_at,
    m.name as medicine_name, 
    m.price as medicine_price,
    m.quantity as stock_quantity,
    m.expiry_date as medicine_expiry,
    s.full_name as seller_name
FROM carts c
JOIN medicines m ON c.medicine_id = m.id
JOIN sellers s ON m.seller_username = s.username
WHERE c.patient_username = $1
ORDER BY c.created_at DESC
`

type GetCartItemsRow struct {
	ID              int32          `json:"id"`
	PatientUsername string         `json:"patient_username"`
	MedicineID      int32          `json:"medicine_id"`
	Quantity        int32          `json:"quantity"`
	TotalPrice      pgtype.Numeric `json:"total_price"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
	MedicineName    string         `json:"medicine_name"`
	MedicinePrice   pgtype.Numeric `json:"medicine_price"`
	StockQuantity   int32          `json:"stock_quantity"`
	MedicineExpiry  pgtype.Date    `json:"medicine_expiry"`
	SellerName      string         `json:"seller_name"`
}

func (q *Queries) GetCartItems(ctx context.Context, patientUsername string) ([]GetCartItemsRow, error) {
	rows, err := q.db.Query(ctx, getCartItems, patientUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsRow{}
	for rows.Next() {
		var i GetCartItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.PatientUsername,
			&i.MedicineID,
			&i.Quantity,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MedicineName,
			&i.MedicinePrice,
			&i.StockQuantity,
			&i.MedicineExpiry,
			&i.SellerName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartTotal = `-- name: GetCartTotal :one
SELECT COALESCE(SUM(c.total_price), 0) as total_amount
FROM carts c
WHERE c.patient_username = $1
`

func (q *Queries) GetCartTotal(ctx context.Context, patientUsername string) (interface{}, error) {
	row := q.db.QueryRow(ctx, getCartTotal, patientUsername)
	var total_amount interface{}
	err := row.Scan(&total_amount)
	return total_amount, err
}

const updateCartItem = `-- name: UpdateCartItem :one
UPDATE carts c
SET 
    quantity = $1,
    total_price = (SELECT m.price * $1 FROM medicines m 
                  JOIN carts c2 ON m.id = c2.medicine_id 
                  WHERE c2.id = $2)
WHERE c.id = $2 AND c.patient_username = $3
RETURNING id, patient_username, medicine_id, quantity, total_price, created_at, updated_at
`

type UpdateCartItemParams struct {
	Quantity        int32  `json:"quantity"`
	ID              int32  `json:"id"`
	PatientUsername string `json:"patient_username"`
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) (Cart, error) {
	row := q.db.QueryRow(ctx, updateCartItem, arg.Quantity, arg.ID, arg.PatientUsername)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.PatientUsername,
		&i.MedicineID,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
